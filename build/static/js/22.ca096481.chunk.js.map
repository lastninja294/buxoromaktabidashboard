{"version":3,"sources":["pages/dashboard/Components/Pagination/index.js","pages/dashboard/Components/Table/index.js","pages/dashboard/registeredUsers/index.js"],"names":["PaginationForTable","total","history","useHistory","useState","location","search","split","map","e","page","setPage","size","setSize","useEffect","push","current","pageSize","showSizeChanger","onChange","cur","DynamicTable","routeForData","deleteKey","useGetData","data","isSuccess","refetch","mutateAsync","useDeleteData","visible","setVisible","tableLoading","setTableLoading","imageSrc","setImageSrc","columns","Object","keys","filter","element","length","elem","title","dataIndex","key","ellipse","width","align","render","text","onClick","style","cursor","forSort","join","color","toString","ellipsis","sort","a","b","fixed","record","direction","padding","onConfirm","id","find","includes","then","message","success","okText","cancelText","bordered","rowKey","dataSource","loading","scroll","y","pagination","Pagination","display","src","onError","error","preview","onVisibleChange","value","RegisteredUsers"],"mappings":"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","file":"static/js/22.ca096481.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Pagination} from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction PaginationForTable({total}) {\r\n  const history = useHistory();\r\n\r\n  const [page, setPage] = useState(\r\n    history.location.search.split('&').map((e) => {\r\n      return +e.split('=')[1];\r\n    })[0] || 1,\r\n  );\r\n  const [size, setSize] = useState(\r\n    history.location.search.split('&').map((e) => {\r\n      return +e.split('=')[1];\r\n    })[1] || 10,\r\n  );\r\n\r\n  useEffect(() => {\r\n    history.push(`?page=${page}&size=${size}`);\r\n  }, []);\r\n\r\n  return (\r\n    <Pagination\r\n      current={page}\r\n      pageSize={size}\r\n      total={total}\r\n      showSizeChanger\r\n      onChange={(cur, pageSize) => {\r\n        history.push(`?page=${cur}&size=${pageSize}`);\r\n        if (size !== pageSize) {\r\n          setPage(1);\r\n          setSize(pageSize);\r\n          history.push(`?page=${1}&size=${pageSize}`);\r\n        } else {\r\n          setPage(cur);\r\n          setSize(pageSize);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PaginationForTable;\r\n\r\nPaginationForTable.propTypes = {\r\n  total: PropTypes.number,\r\n};\r\n","import React, {useState} from 'react';\r\nimport {useGetData, useDeleteData} from 'hooks';\r\nimport {Table, Image, Tag, message, Space, Popconfirm} from 'antd';\r\nimport {BsImage} from 'react-icons/bs';\r\nimport {AiOutlineDelete, AiOutlineEdit} from 'react-icons/ai';\r\nimport PaginationForTable from '../Pagination';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DynamicTable = ({routeForData, deleteKey}) => {\r\n  const history = useHistory();\r\n\r\n  const {data, isSuccess, refetch} = useGetData(\r\n    `${routeForData}/${\r\n      history.location.search.split('?')[1]\r\n        ? history.location.search.split('?')[1]\r\n        : 'page=1&size=10'\r\n    }`,\r\n  );\r\n\r\n  const {mutateAsync} = useDeleteData(deleteKey);\r\n  const [visible, setVisible] = useState(false);\r\n  const [tableLoading, setTableLoading] = useState(false);\r\n  const [imageSrc, setImageSrc] = useState('');\r\n\r\n  let columns = {};\r\n\r\n  if (isSuccess) {\r\n    columns = Object.keys(data?.data.data[0])\r\n      .map((e) => {\r\n        if (!(e.split('_').filter((element) => element === 'id').length > 0)) {\r\n          if (e.split('_').filter((elem) => elem === 'img').length > 0) {\r\n            return {\r\n              title: 'Img',\r\n              dataIndex: e,\r\n              key: 'img',\r\n              ellipse: true,\r\n              width: 50,\r\n              align: 'center',\r\n              render: (text) => {\r\n                return (\r\n                  <>\r\n                    <BsImage\r\n                      size={24}\r\n                      onClick={() => {\r\n                        setVisible(true);\r\n                        setImageSrc(text);\r\n                      }}\r\n                      style={{cursor: 'pointer'}}\r\n                    />\r\n                  </>\r\n                );\r\n              },\r\n              forSort: 1,\r\n            };\r\n          } else if (\r\n            e.split('_').filter((elem) => elem === 'status').length > 0\r\n          ) {\r\n            return {\r\n              title: e.split('_').join(' '),\r\n              dataIndex: e,\r\n              key: e,\r\n              forSort: 0,\r\n              width: 150,\r\n              render: (text) => {\r\n                if (text) {\r\n                  return <Tag color='green'>{text.toString()}</Tag>;\r\n                }\r\n                return <Tag color='red'>{text.toString()}</Tag>;\r\n              },\r\n            };\r\n          }\r\n          return {\r\n            title: e.split('_').join(' '),\r\n            dataIndex: e,\r\n            key: e,\r\n            width: 150,\r\n            forSort: 0,\r\n            ellipsis: true,\r\n          };\r\n        }\r\n      })\r\n      .filter((e) => e)\r\n      .sort((a, b) => a.forSort - b.forSort);\r\n    if (deleteKey !== 'users') {\r\n      columns.push({\r\n        title: 'Actions',\r\n        key: 'actions',\r\n        width: 120,\r\n        fixed: 'right',\r\n        render: (record) => {\r\n          return (\r\n            <>\r\n              <Space size={'middle'} direction='horizontal' align='center'>\r\n                <AiOutlineEdit\r\n                  size={28}\r\n                  style={{\r\n                    padding: '4px',\r\n                    cursor: 'pointer',\r\n                  }}\r\n                />\r\n                <Popconfirm\r\n                  title={`Haqiqatdan ham o'chirishni xohlaysizmi?`}\r\n                  onConfirm={async () => {\r\n                    setTableLoading(true);\r\n                    mutateAsync({\r\n                      id: record[\r\n                        Object.keys(record).find((e) => {\r\n                          return e.includes('_id');\r\n                        })\r\n                      ],\r\n                    }).then(() => {\r\n                      message.success(\"Muvaffaqiyatli o'chirildi\");\r\n                      setTableLoading(false);\r\n                      refetch();\r\n                    });\r\n                  }}\r\n                  okText='Xa'\r\n                  cancelText={`Yo'q`}>\r\n                  <AiOutlineDelete\r\n                    size={28}\r\n                    style={{\r\n                      padding: '4px',\r\n                      cursor: 'pointer',\r\n                    }}\r\n                    color='#e91e63'\r\n                  />\r\n                </Popconfirm>\r\n              </Space>\r\n            </>\r\n          );\r\n        },\r\n      });\r\n    } else {\r\n      columns.push({\r\n        title: 'Actions',\r\n        key: 'actions',\r\n        width: 30,\r\n        fixed: 'right',\r\n        align: 'center',\r\n        render: (record) => {\r\n          return (\r\n            <>\r\n              <Space size={'middle'} direction='horizontal' align='center'>\r\n                <Popconfirm\r\n                  title={`Haqiqatdan ham o'chirishni xohlaysizmi?`}\r\n                  onConfirm={async () => {\r\n                    setTableLoading(true);\r\n                    mutateAsync({\r\n                      id: record[\r\n                        Object.keys(record).find((e) => {\r\n                          return e.includes('_id');\r\n                        })\r\n                      ],\r\n                    }).then(() => {\r\n                      message.success(\"Muvaffaqiyatli o'chirildi\");\r\n                      setTableLoading(false);\r\n                      refetch();\r\n                    });\r\n                  }}\r\n                  okText='Xa'\r\n                  cancelText={`Yo'q`}>\r\n                  <AiOutlineDelete\r\n                    size={28}\r\n                    style={{\r\n                      padding: '4px',\r\n                      cursor: 'pointer',\r\n                    }}\r\n                    color='#e91e63'\r\n                  />\r\n                </Popconfirm>\r\n              </Space>\r\n            </>\r\n          );\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isSuccess ? (\r\n        <Space size={'middle'} direction='vertical'>\r\n          <Table\r\n            bordered\r\n            rowKey={(record) => {\r\n              return record[Object.keys(record)[0]];\r\n            }}\r\n            columns={columns}\r\n            dataSource={data?.data?.data}\r\n            loading={tableLoading}\r\n            scroll={{\r\n              y: 400,\r\n            }}\r\n            ellipse={true}\r\n            pagination={false}\r\n          />\r\n          <PaginationForTable total={data?.data?.size || 100} />\r\n        </Space>\r\n      ) : (\r\n        'Loading'\r\n      )}\r\n      <Image\r\n        width={200}\r\n        style={{\r\n          display: 'none',\r\n        }}\r\n        src={imageSrc}\r\n        onError={() => {\r\n          visible ? message.error('Rasm aniqlanmadi!') : 'Hehe';\r\n        }}\r\n        preview={{\r\n          visible,\r\n          onVisibleChange: (value) => {\r\n            if (value === false) {\r\n              setImageSrc('');\r\n            }\r\n            setVisible(value);\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicTable;\r\n\r\nDynamicTable.propTypes = {\r\n  routeForData: PropTypes.string,\r\n  deleteKey: PropTypes.string,\r\n};\r\n","import AppPageMetadata from '@crema/core/AppPageMetadata';\r\nimport React from 'react';\r\nimport {DynamicTable} from '../Components';\r\n\r\nconst RegisteredUsers = () => {\r\n  return (\r\n    <>\r\n      <AppPageMetadata title='News' />\r\n      <h2>{\"Ro'yhatdan o'tgan foydalanuvchilar\"}</h2>\r\n      <DynamicTable routeForData={'users'} deleteKey='users' />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisteredUsers;\r\n"],"sourceRoot":""}